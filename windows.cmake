get_property(_CMAKE_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE)
if(NOT _CMAKE_IN_TRY_COMPILE)
  if(NOT VCPKG_CRT_LINKAGE)
    include(${CMAKE_CURRENT_LIST_DIR}/../../triplets/${VCPKG_TARGET_TRIPLET}.cmake)
  endif()

  if(VCPKG_CRT_LINKAGE STREQUAL "dynamic")
    set(VCPKG_CRT_LINK_FLAG_PREFIX "/MD")
  elseif(VCPKG_CRT_LINKAGE STREQUAL "static")
    set(VCPKG_CRT_LINK_FLAG_PREFIX "/MT")
  else()
    message(FATAL_ERROR "Invalid setting for VCPKG_CRT_LINKAGE: \"${VCPKG_CRT_LINKAGE}\".")
  endif()

  set(CMAKE_CXX_STANDARD 20 CACHE STRING "" FORCE)
  set(CMAKE_CXX_STANDARD_REQUIRED ON CACHE STRING "" FORCE)
  set(CMAKE_CXX_EXTENSIONS OFF CACHE STRING "" FORCE)

  if(NOT VCPKG_CXX_FLAGS MATCHES "/EH")
    set(VCPKG_CXX_FLAGS "${VCPKG_CXX_FLAGS} /EHsc /d2FH4")
  endif()

  if(NOT VCPKG_CXX_FLAGS MATCHES "/GR")
    set(VCPKG_CXX_FLAGS "${VCPKG_CXX_FLAGS} /GR")
  endif()

  set(MSVC_COMMON "/nologo /W3 /DWIN32 /D_WINDOWS /FC /MP /Zc:inline /wd28251 /wd26451 /utf-8")
  set(MSVC_COMMON_DEBUG "${VCPKG_CRT_LINK_FLAG_PREFIX}d /Ob0 /Od /RTC1 /GS /D_DEBUG")
  set(MSVC_COMMON_RELEASE "${VCPKG_CRT_LINK_FLAG_PREFIX} /Ox /Os /Oi /GF /Gy /GS- /GL /DNDEBUG")

  set(CMAKE_C_FLAGS "${MSVC_COMMON} ${VCPKG_C_FLAGS}" CACHE STRING "")
  set(CMAKE_CXX_FLAGS "${MSVC_COMMON} ${VCPKG_CXX_FLAGS} /Zc:__cplusplus /permissive- /await" CACHE STRING "")

  set(CMAKE_C_FLAGS_DEBUG "${MSVC_COMMON_DEBUG} /Z7 ${VCPKG_C_FLAGS_DEBUG}" CACHE STRING "")
  set(CMAKE_CXX_FLAGS_DEBUG "${MSVC_COMMON_DEBUG} /Z7 ${VCPKG_CXX_FLAGS_DEBUG}" CACHE STRING "")

  set(CMAKE_C_FLAGS_RELEASE "${MSVC_COMMON_RELEASE} /Z7 ${VCPKG_C_FLAGS_RELEASE}" CACHE STRING "")
  set(CMAKE_CXX_FLAGS_RELEASE "${MSVC_COMMON_RELEASE} /Z7 ${VCPKG_CXX_FLAGS_RELEASE} /await:heapelide" CACHE STRING "")

  set(CMAKE_STATIC_LINKER_FLAGS_DEBUG "" CACHE STRING "")
  set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "/DEBUG:FASTLINK /INCREMENTAL" CACHE STRING "")
  set(CMAKE_EXE_LINKER_FLAGS_DEBUG "/DEBUG:FASTLINK /INCREMENTAL" CACHE STRING "")

  set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "/INCREMENTAL:NO /LTCG:INCREMENTAL" CACHE STRING "")
  set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "/DEBUG:FULL /INCREMENTAL:NO /OPT:REF /OPT:ICF /LTCG:INCREMENTAL" CACHE STRING "")
  set(CMAKE_EXE_LINKER_FLAGS_RELEASE "/DEBUG:FULL /INCREMENTAL:NO /OPT:REF /OPT:ICF /LTCG:INCREMENTAL" CACHE STRING "")

  set(CMAKE_RC_FLAGS "/nologo -c65001 /DWIN32" CACHE STRING "")

  function(vcpkg_find_library name header)
    find_path(${name}_INCLUDE_DIR ${header} PATHS
      ${_VCPKG_ROOT_DIR}/installed/${VCPKG_TARGET_TRIPLET}/include NO_DEFAULT_PATH)
    if(NOT ${name}_INCLUDE_DIR)
      message(FATAL_ERROR "Could not find library: ${name} (${header})")
    endif()
    if(ARGN)
      foreach(arg IN LISTS ARGN)
        if(NOT ${name}_LIBRARY_DEBUG)
          find_library(${name}_LIBRARY_DEBUG NAMES ${arg} PATHS
            ${_VCPKG_ROOT_DIR}/installed/${VCPKG_TARGET_TRIPLET}/debug/lib NO_DEFAULT_PATH)
        endif()
        if(NOT ${name}_LIBRARY_RELEASE)
          find_library(${name}_LIBRARY_RELEASE NAMES ${arg} PATHS
            ${_VCPKG_ROOT_DIR}/installed/${VCPKG_TARGET_TRIPLET}/lib NO_DEFAULT_PATH)
        endif()
      endforeach()
      if(NOT ${name}_LIBRARY_DEBUG OR NOT ${name}_LIBRARY_RELEASE)
        message(FATAL_ERROR "Could not find library: ${name}")
      endif()
      add_library(${name} STATIC IMPORTED)
      set_target_properties(${name} PROPERTIES IMPORTED_LOCATION_DEBUG "${${name}_LIBRARY_DEBUG}")
      set_target_properties(${name} PROPERTIES IMPORTED_LOCATION_RELEASE "${${name}_LIBRARY_RELEASE}")
      message(STATUS "Found ${name}: ${${name}_LIBRARY_DEBUG} (Debug)")
      message(STATUS "Found ${name}: ${${name}_LIBRARY_RELEASE} (Release)")
    else()
      add_library(${name} INTERFACE)
    endif()
    set_target_properties(${name} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${${name}_INCLUDE_DIR}")
  endfunction()
endif()
