include_guard(GLOBAL)
include("${CMAKE_CURRENT_LIST_DIR}/config.cmake")

# Set C standard.
set(CMAKE_C_STANDARD 11 CACHE STRING "")
set(CMAKE_C_STANDARD_REQUIRED ON CACHE STRING "")
set(CMAKE_C_EXTENSIONS ON CACHE STRING "")

# Set C++ standard.
set(CMAKE_CXX_STANDARD 20 CACHE STRING "")
set(CMAKE_CXX_STANDARD_REQUIRED ON CACHE STRING "")
set(CMAKE_CXX_EXTENSIONS OFF CACHE STRING "")

# Set system.
set(CMAKE_CROSSCOMPILING OFF CACHE BOOL "")
set(CMAKE_SYSTEM_PROCESSOR x86_64 CACHE STRING "")
set(CMAKE_SYSTEM_NAME Linux CACHE STRING "")

# Set compiler.
set(CMAKE_C_COMPILER "${CMAKE_CURRENT_LIST_DIR}/llvm/bin/clang" CACHE STRING "")
set(CMAKE_CXX_COMPILER "${CMAKE_CURRENT_LIST_DIR}/llvm/bin/clang++" CACHE STRING "")
set(CMAKE_RANLIB "${CMAKE_CURRENT_LIST_DIR}/llvm/bin/llvm-ranlib" CACHE STRING "")
set(CMAKE_AR "${CMAKE_CURRENT_LIST_DIR}/llvm/bin/llvm-ar" CACHE STRING "")
set(CMAKE_NM "${CMAKE_CURRENT_LIST_DIR}/llvm/bin/llvm-nm" CACHE STRING "")

# Set compiler flags.
set(CLANG_C_FLAGS "-fasm -fPIC -fdiagnostics-absolute-paths -D_DEFAULT_SOURCE=1")
set(CLANG_C_FLAGS_RELEASE "-flto=full")

set(CLANG_CXX_FLAGS "${CLANG_C_FLAGS} -fcoroutines-ts -isystem ${CMAKE_CURRENT_LIST_DIR}/llvm/include")
set(CLANG_CXX_FLAGS_RELEASE "${CLANG_C_FLAGS_RELEASE} -fwhole-program-vtables -fvirtual-function-elimination")

set(CMAKE_C_FLAGS_INIT "${CLANG_C_FLAGS} ${VCPKG_C_FLAGS}")
set(CMAKE_C_FLAGS_DEBUG_INIT "${VCPKG_C_FLAGS_DEBUG}")
set(CMAKE_C_FLAGS_RELEASE_INIT "${CLANG_C_FLAGS_RELEASE} ${VCPKG_C_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_MINSIZEREL_INIT "${CLANG_C_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_RELWITHDEBINFO_INIT "${CLANG_C_FLAGS_RELEASE}")

set(CMAKE_CXX_FLAGS_INIT "${CLANG_CXX_FLAGS} ${VCPKG_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG_INIT "${VCPKG_CXX_FLAGS_DEBUG}")
set(CMAKE_CXX_FLAGS_RELEASE_INIT "${CLANG_CXX_FLAGS_RELEASE} ${VCPKG_CXX_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_MINSIZEREL_INIT "${CLANG_CXX_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT "${CLANG_CXX_FLAGS_RELEASE}")

# Set linker flags.
foreach(LINKER SHARED_LINKER MODULE_LINKER EXE_LINKER)
  set(CMAKE_${LINKER}_FLAGS_INIT "-pthread -ldl -lc++abi ${VCPKG_LINKER_FLAGS}")
  set(CMAKE_${LINKER}_FLAGS_RELEASE_INIT "-Wl,-s")
  set(CMAKE_${LINKER}_FLAGS_MINSIZEREL_INIT "-Xlinker -plugin-opt=O3 -Wl,-s")
endforeach()

# Add cmake path.
list(PREPEND CMAKE_SYSTEM_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}/llvm/lib/cmake")

# Disable FindThreads module.
set(Threads_FOUND TRUE)
set(CMAKE_THREAD_LIBS_INIT "")
set(CMAKE_USE_PTHREADS_INIT "1")
add_library(Threads::Threads INTERFACE IMPORTED)
