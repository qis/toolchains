if(NOT DEFINED VCPKG_TARGET_TRIPLET)
  set(VCPKG_TARGET_TRIPLET "x64-linux-xnet" CACHE STRING "")
endif()

include("${CMAKE_CURRENT_LIST_DIR}/config.cmake")

if(DEFINED CMAKE_CXX_CLANG_TIDY AND CMAKE_BUILD_TYPE STREQUAL "Debug")
  unset(CMAKE_CXX_CLANG_TIDY CACHE)
endif()

set(LLVM_CRT_FLAG "")
if(VCPKG_CRT_LINKAGE STREQUAL "static")
  set(LLVM_CRT_FLAG "-static")
endif()

# Set system.
set(CMAKE_CROSSCOMPILING OFF CACHE BOOL "")
set(CMAKE_SYSTEM_PROCESSOR x86_64 CACHE STRING "")
set(CMAKE_SYSTEM_NAME Linux CACHE STRING "")

# Set compiler.
set(CMAKE_C_COMPILER "cc" CACHE STRING "" FORCE)
set(CMAKE_CXX_COMPILER "c++" CACHE STRING "" FORCE)
set(CMAKE_RANLIB "ranlib" CACHE STRING "" FORCE)
set(CMAKE_AR "ar" CACHE STRING "" FORCE)
set(CMAKE_NM "nm" CACHE STRING "" FORCE)

# WARN Flags
set(WARN_FLAGS "-Wall -Wextra -Wpedantic")
set(WARN_FLAGS "${WARN_FLAGS} -Wno-unused-parameter")
set(WARN_FLAGS "${WARN_FLAGS} -Wno-unused-variable")

# Compiler Flags
set(CMAKE_C_FLAGS "-fasm -fPIC ${WARN_FLAGS} ${VCPKG_C_FLAGS} -pthread -D_DEFAULT_SOURCE=1" CACHE STRING "")
set(CMAKE_C_FLAGS_DEBUG "-O0 -g -D_DEBUG ${VCPKG_C_FLAGS_DEBUG}" CACHE STRING "")
set(CMAKE_C_FLAGS_RELEASE "-O3 -flto -DNDEBUG ${VCPKG_C_FLAGS_RELEASE}" CACHE STRING "")
set(CMAKE_C_FLAGS_MINSIZEREL "-Os -flto -DNDEBUG ${VCPKG_C_FLAGS_RELEASE}" CACHE STRING "")
set(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g ${VCPKG_C_FLAGS_RELEASE}" CACHE STRING "")

set(CMAKE_CXX_FLAGS "-stdlib=libc++ ${CMAKE_C_FLAGS} ${VCPKG_CXX_FLAGS}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${VCPKG_CXX_FLAGS_DEBUG}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${VCPKG_CXX_FLAGS_RELEASE}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} ${VCPKG_CXX_FLAGS_RELEASE}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO} ${VCPKG_CXX_FLAGS_RELEASE}" CACHE STRING "")

# Linker Flags
foreach(LINKER SHARED_LINKER MODULE_LINKER EXE_LINKER)
  set(CMAKE_${LINKER}_FLAGS "-fuse-ld=lld -Wl,--as-needed ${VCPKG_LINKER_FLAGS} ${LLVM_CRT_FLAG}" CACHE STRING "")
  set(CMAKE_${LINKER}_FLAGS_DEBUG "${VCPKG_LINKER_FLAGS_DEBUG}" CACHE STRING "")
  set(CMAKE_${LINKER}_FLAGS_RELEASE "-Wl,-s ${VCPKG_LINKER_FLAGS_RELEASE}" CACHE STRING "")
  set(CMAKE_${LINKER}_FLAGS_MINSIZEREL "-Wl,-s -Xlinker -plugin-opt=O3 ${VCPKG_LINKER_FLAGS_RELEASE}" CACHE STRING "")
  set(CMAKE_${LINKER}_FLAGS_RELWITHDEBINFO "${VCPKG_LINKER_FLAGS_RELEASE}" CACHE STRING "")
endforeach()

if(NOT TOOLCHAIN_LINK_LIBRARIES)
  set(TOOLCHAIN_LINK_LIBRARIES ON)
  mark_as_advanced(TOOLCHAIN_LINK_LIBRARIES)
  link_libraries(dl)
endif()
