find_path(OPENSSL_INCLUDE_DIR openssl/opensslv.h PATH_SUFFIXES include)

if(NOT OPENSSL_LIBRARIES)
  get_filename_component(OPENSSL_ROOT_DIR ${OPENSSL_INCLUDE_DIR} DIRECTORY)

  find_library(OPENSSL_CRYPTO_LIBRARY_RELEASE NAMES crypto libcrypto NAMES_PER_DIR
    NO_DEFAULT_PATH PATHS ${OPENSSL_ROOT_DIR}/lib PATH_SUFFIXES lib)
  find_library(OPENSSL_CRYPTO_LIBRARY_DEBUG NAMES crypto libcrypto NAMES_PER_DIR
    NO_DEFAULT_PATH PATHS ${OPENSSL_ROOT_DIR}/debug/lib PATH_SUFFIXES lib)

  find_library(OPENSSL_SSL_LIBRARY_RELEASE NAMES ssl libssl NAMES_PER_DIR
    NO_DEFAULT_PATH PATHS ${OPENSSL_ROOT_DIR}/lib PATH_SUFFIXES lib)
  find_library(OPENSSL_SSL_LIBRARY_DEBUG NAMES ssl libssl NAMES_PER_DIR
    NO_DEFAULT_PATH PATHS ${OPENSSL_ROOT_DIR}/debug/lib PATH_SUFFIXES lib)

  include(SelectLibraryConfigurations)
  select_library_configurations(OPENSSL_CRYPTO)
  select_library_configurations(OPENSSL_SSL)
  set(OPENSSL_LIBRARIES "${OPENSSL_CRYPTO_LIBRARIES};${OPENSSL_SSL_LIBRARIES}")
else()
  file(TO_CMAKE_PATH "${OPENSSL_LIBRARIES}" OPENSSL_LIBRARIES)
endif()

if(OPENSSL_INCLUDE_DIR AND EXISTS "${OPENSSL_INCLUDE_DIR}/openssl/opensslv.h")
  set(OPENSSL_VERSION "vcpkg")
  set(OPENSSL_VERSION_STRING "${OPENSSL_VERSION}")
endif()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(OpenSSL
  REQUIRED_VARS
    OPENSSL_INCLUDE_DIR
    OPENSSL_LIBRARIES
    OPENSSL_CRYPTO_LIBRARIES
    OPENSSL_CRYPTO_LIBRARY_RELEASE
    OPENSSL_CRYPTO_LIBRARY_DEBUG
    OPENSSL_SSL_LIBRARIES
    OPENSSL_SSL_LIBRARY_RELEASE
    OPENSSL_SSL_LIBRARY_DEBUG
  HANDLE_COMPONENTS)

if(OPENSSL_FOUND)
  set(OPENSSL_INCLUDE_DIRS ${OPENSSL_INCLUDE_DIR})

  if(NOT TARGET OpenSSL::Crypto)
    add_library(OpenSSL::Crypto UNKNOWN IMPORTED)
    set_target_properties(OpenSSL::Crypto PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES "${OPENSSL_INCLUDE_DIR}"
      IMPORTED_LINK_INTERFACE_LANGUAGES "C"
      IMPORTED_CONFIGURATIONS "DEBUG;RELEASE"
      IMPORTED_LOCATION_RELEASE "${OPENSSL_CRYPTO_LIBRARY_RELEASE}"
      IMPORTED_LOCATION_DEBUG "${OPENSSL_CRYPTO_LIBRARY_DEBUG}"
      MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release
      MAP_IMPORTED_CONFIG_MINSIZEREL Release)
  endif()
  if(DEFINED CMAKE_BUILD_TYPE)
    if(CMAKE_BUILD_TYPE MATCHES "Debug")
      set(OPENSSL_CRYPTO_LIBRARY "${OPENSSL_CRYPTO_LIBRARY_DEBUG}")
    else()
      set(OPENSSL_CRYPTO_LIBRARY "${OPENSSL_CRYPTO_LIBRARY_RELEASE}")
    endif()
    mark_as_advanced(OPENSSL_CRYPTO_LIBRARY)
    set_property(TARGET OpenSSL::Crypto APPEND PROPERTY
      IMPORTED_LOCATION "${OPENSSL_CRYPTO_LIBRARY}")
  else()
    set(OPENSSL_LIBRARY "${OPENSSL_CRYPTO_LIBRARIES}")
  endif()
  if(WIN32)
    target_link_libraries(OpenSSL::Crypto INTERFACE crypt32 ws2_32)
  endif()

  if(NOT TARGET OpenSSL::SSL)
    add_library(OpenSSL::SSL UNKNOWN IMPORTED)
    set_target_properties(OpenSSL::SSL PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES "${OPENSSL_INCLUDE_DIR}"
      IMPORTED_LINK_INTERFACE_LANGUAGES "C"
      IMPORTED_CONFIGURATIONS "DEBUG;RELEASE"
      IMPORTED_LOCATION_RELEASE "${OPENSSL_SSL_LIBRARY_RELEASE}"
      IMPORTED_LOCATION_DEBUG "${OPENSSL_SSL_LIBRARY_DEBUG}"
      MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release
      MAP_IMPORTED_CONFIG_MINSIZEREL Release)
  endif()
  if(DEFINED CMAKE_BUILD_TYPE)
    if(CMAKE_BUILD_TYPE MATCHES "Debug")
      set(OPENSSL_SSL_LIBRARY "${OPENSSL_SSL_LIBRARY_DEBUG}")
    else()
      set(OPENSSL_SSL_LIBRARY "${OPENSSL_SSL_LIBRARY_RELEASE}")
    endif()
    mark_as_advanced(OPENSSL_SSL_LIBRARY)
    set_property(TARGET OpenSSL::SSL APPEND PROPERTY
      IMPORTED_LOCATION "${OPENSSL_SSL_LIBRARY}")
  else()
    set(OPENSSL_LIBRARY "${OPENSSL_SSL_LIBRARIES}")
  endif()
endif()

mark_as_advanced(OPENSSL_INCLUDE_DIR)
